<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>topk on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/tags/topk/</link>
    <description>Recent content in topk on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Jul 2020 09:52:36 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/topk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前K个高频元素</title>
      <link>http://localhost:1313/post/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 17 Jul 2020 09:52:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</guid>
      <description>问题描述 找出数组中出现频率最高的k个元素 https://leetcode-cn.com/problems/top-k-frequent-elements/ 思路 用HashMap统计频率 用小根堆求出前K大的数 java实现 在实现最小堆时，可以对元素建堆，并通</description>
    </item>
    
    <item>
      <title>TopK问题</title>
      <link>http://localhost:1313/post/topk%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 05 Jul 2020 16:42:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/topk%E9%97%AE%E9%A2%98/</guid>
      <description>从N个数中找出最大的K个数 排序 O(NlogN) 冒泡排序 O(N*K) 小根堆 O(NlogK) 如果求最大k个数就用小根堆，如果求最小k个数就用大根堆 虽然不是最快的，但是却是最好的方式，</description>
    </item>
    
  </channel>
</rss>