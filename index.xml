<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 28 Aug 2020 20:11:22 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql事务的实现</title>
      <link>http://localhost:1313/post/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 28 Jul 2020 20:25:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>ACID 原子性 一致性 隔离性 持久性 原子性 基于日志的REDO/UNDO机制 undo log （回滚日志）：用作回滚 提供回滚操作，一般是逻辑日志（可以认为当delet</description>
    </item>
    
    <item>
      <title>HTTP协议发展过程</title>
      <link>http://localhost:1313/post/http%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 28 Jul 2020 15:56:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/http%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B/</guid>
      <description>http 基本流程 TCP Connect Request Response TCP Close http 发展过程 http/0.9 最早诞生于 1991 年 极其简单，没有 http 头， 没有状态码，没有版本号 请求只支持 Get 方法,请求只有一行 GET /hello.html 响应也非常简单，</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>http://localhost:1313/post/tcp/</link>
      <pubDate>Sun, 28 Jun 2020 21:33:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tcp/</guid>
      <description>TCP 的特点 面向连接 可靠服务 面向字节流 面向连接 连接就是一对一，当双方都确认对方是谁时，连接就建立起来了， 源IP+源端口号+目标IP+目标端口号就</description>
    </item>
    
    <item>
      <title>Win10文件夹共享</title>
      <link>http://localhost:1313/post/win10%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Fri, 28 Aug 2020 20:11:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/win10%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB/</guid>
      <description>文件共享 关闭防火墙 打开windows安全中心 关闭公用网络防火墙 此时因该能从旧电脑上ping通新电脑 在新电脑上任意选择选择一个文件夹，将其共享</description>
    </item>
    
    <item>
      <title>动态代理</title>
      <link>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Wed, 19 Aug 2020 01:10:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>代理模式 控制对基础对象的访问 在访问时增加额外的功能 动态代理 静态代理需要生成代理类，代理类的Class文件在编译期生成 动态代理利用反射机制在运</description>
    </item>
    
    <item>
      <title>ThreadLocal</title>
      <link>http://localhost:1313/post/threadlocal/</link>
      <pubDate>Tue, 18 Aug 2020 22:46:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/threadlocal/</guid>
      <description>强软弱虚 强引用： 只要强引用存在，被引用的对象就永远不会被回收 软引用： 只被软引用关联着的对象在系统将要发生内存溢出时就会被列入回收范进行回收 j</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>http://localhost:1313/post/spring/</link>
      <pubDate>Tue, 18 Aug 2020 14:51:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/spring/</guid>
      <description>spring中bean的细节 创建bean的三种方式 使用默认构造函数创建：使用bean标签，配置id和class属性并且没有其他属性和标签时，</description>
    </item>
    
    <item>
      <title>Mybatis</title>
      <link>http://localhost:1313/post/mybatis/</link>
      <pubDate>Tue, 18 Aug 2020 09:28:27 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mybatis/</guid>
      <description>自定义mybatis mybatis环境搭建 mybatis表格之间的关系 一对一 使用 typeMap 定义映射关系 在typeMap中使用association定</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>http://localhost:1313/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sun, 16 Aug 2020 16:47:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>CAP 理论 一致性(Consistency)、可用性(Availability)、分区容忍性(Partition Tolerance) 一致性：分布式系统中的所有数据是</description>
    </item>
    
    <item>
      <title>Java反射</title>
      <link>http://localhost:1313/post/java%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Thu, 06 Aug 2020 09:12:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%8F%8D%E5%B0%84/</guid>
      <description>反射基础 Java反射机制是在运行状态中，对任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种</description>
    </item>
    
    <item>
      <title>海量数据处理问题</title>
      <link>http://localhost:1313/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 05 Aug 2020 17:48:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</guid>
      <description>知识点回顾 布隆过滤器 流程 准备 k 个 hash 函数，每个函数可以把 key 散列成为一个整数 初始化一个尽可能长的比特数组，每个比特位初始化为0 某个key加入集合</description>
    </item>
    
    <item>
      <title>最短路径算法</title>
      <link>http://localhost:1313/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 03 Aug 2020 11:57:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</guid>
      <description>Dijkstra 算法流程 用一个数组 dist 存储每个节点到 source 的距离; source 初始化为0，其他初始化为 Integer.MAX_VALUE; 从 dist 中选出距离最短的那个节点 N（这意味着节点 N 的最短距离已经求出来</description>
    </item>
    
    <item>
      <title>Java线程同步</title>
      <link>http://localhost:1313/post/java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Thu, 30 Jul 2020 09:12:47 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</guid>
      <description>synchronized synchronized 关键字的用法 修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。 修饰普通方法，对象锁，进入同步代码前要获得当前</description>
    </item>
    
    <item>
      <title>Mysql索引</title>
      <link>http://localhost:1313/post/mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 28 Jul 2020 21:26:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>为什么不用哈希表？ 哈希函数难以设计 需要大量的内存空间 不方便范围查询 会自动为主键创建索引吗？ 如果表设置了主键，会自动为主键创建索引 如果没有主键</description>
    </item>
    
    <item>
      <title>SQL语句练习</title>
      <link>http://localhost:1313/post/sql%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Tue, 28 Jul 2020 15:31:37 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sql%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/</guid>
      <description>表名和字段 学生表 Student(s_id,s_name,s_birth,s_sex) --学生编号,学生姓名, 出生年月,学生性别 课程表 Course(c_id,c_name,t_id) – --课程编号, 课程名称, 教师编号 教师表 Teacher(t_id,t_name) --教师编号,教师姓名 成绩表 Score(s_id,c_id,s_score)</description>
    </item>
    
    <item>
      <title>Redis的zset实现</title>
      <link>http://localhost:1313/post/redis%E7%9A%84zset%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 26 Jul 2020 16:38:19 +0800</pubDate>
      
      <guid>http://localhost:1313/post/redis%E7%9A%84zset%E5%AE%9E%E7%8E%B0/</guid>
      <description>redis的 zset 为什么使用 skiplist 而不用 RB-tree？ 需要更少的指针内存，当晋升概率设为 1/4 时，一个节点平均需要 1.33 个指针。 跳表的范围查询比红黑树效率</description>
    </item>
    
    <item>
      <title>接雨水</title>
      <link>http://localhost:1313/post/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</link>
      <pubDate>Sun, 26 Jul 2020 14:24:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</guid>
      <description>问题描述 https://leetcode-cn.com/problems/trapping-rain-water/ Solutions 暴力法：遍历数组中的每一个元素，并分别向左、向右寻找比当前元素大的最大元素，两者取其小，减掉当前元素就是当前元素上面可存储的水量</description>
    </item>
    
    <item>
      <title>字符串匹配算法</title>
      <link>http://localhost:1313/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 24 Jul 2020 09:37:19 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</guid>
      <description>问题描述 给定一个主字符串 text 和一个模式字符串 pattern，返回字符串 text 中和字符串 pattern 相同的子串的起始位置。 实现方法 BR暴力法 先找到和 s 中和 p 的</description>
    </item>
    
    <item>
      <title>滑动窗口中位数</title>
      <link>http://localhost:1313/post/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Thu, 23 Jul 2020 08:44:06 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>问题描述 给定一个数组，以及一个窗口，求出窗口中的数字的中位数 https://leetcode-cn.com/problems/sliding-window-median/ 怎么求中位数 插入排序法 用一个 arraylist 存储窗口内的数字 每次去掉窗口尾的一个数据，并按照</description>
    </item>
    
    <item>
      <title>丑数系列</title>
      <link>http://localhost:1313/post/%E4%B8%91%E6%95%B0%E7%B3%BB%E5%88%97/</link>
      <pubDate>Wed, 22 Jul 2020 20:05:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%B8%91%E6%95%B0%E7%B3%BB%E5%88%97/</guid>
      <description>丑数 https://leetcode-cn.com/problems/ugly-number/ 判断一个数不是丑数难，但是判断一个数是否是丑数简单。 1 2 3 4 5 6 7 for i = 2,3,5 while(num % i == 0) num = num/i if(num == 1) return true; else return false; `` 丑数Ⅱ https://leetcode-cn.com/problems/ugly-number-ii/ 三指针法 超级丑数 https://leetcode-cn.com/problems/super-ugly-number/</description>
    </item>
    
    <item>
      <title>数据流中的中位数</title>
      <link>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Wed, 22 Jul 2020 17:54:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>问题描述 https://leetcode-cn.com/problems/find-median-from-data-stream/ 实现思路 利用两个堆，一个大根堆low，存储前半部分数，一个小根堆high，存储后半部分数。 add(num): 1 2 3 4 5 6 if(low.size() &amp;gt; high.size()) low.offer(num) high.offer(low.poll()) else high.offer(num) low.offer(high.poll()) 进阶 如果数</description>
    </item>
    
    <item>
      <title>单调栈（队列）</title>
      <link>http://localhost:1313/post/%E5%8D%95%E8%B0%83%E6%A0%88%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 22 Jul 2020 17:14:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8D%95%E8%B0%83%E6%A0%88%E9%98%9F%E5%88%97/</guid>
      <description>单调栈（队列） 题目 滑动窗口最大值 https://leetcode-cn.com/problems/sliding-window-maximum/ 应用了单调队列的思想。</description>
    </item>
    
    <item>
      <title>滑动窗口</title>
      <link>http://localhost:1313/post/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Tue, 21 Jul 2020 15:00:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>适用于滑动窗口的题目的特点 滑动窗口模式 最短 先移动右指针，直至满足条件 再移动左指针，直至不满足条件 最长 先移动右指针，直至不满足条件 再移动左指针</description>
    </item>
    
    <item>
      <title>动态规划专题</title>
      <link>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98/</link>
      <pubDate>Tue, 21 Jul 2020 06:40:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%93%E9%A2%98/</guid>
      <description>动态规划 一个模型 多阶段决策最优解模型 三个特征 最优子结构：最优解包含子问题的最优解，或者理解为“后面的状态可以通过前面的状态推导出来”。 无后效</description>
    </item>
    
    <item>
      <title>打家劫舍</title>
      <link>http://localhost:1313/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Mon, 20 Jul 2020 18:56:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>打家劫舍 给定一个数组，求数组中不相邻元素的最大和。 https://leetcode-cn.com/problems/house-robber/ 简单动态规划 打家劫舍Ⅱ 数组头和数组尾被视为相邻，求这种情况下数组中不相邻元素的最大和。 https://leetcode-cn.com/problems/house-robber-ii/</description>
    </item>
    
    <item>
      <title>零钱兑换</title>
      <link>http://localhost:1313/post/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</link>
      <pubDate>Mon, 20 Jul 2020 18:42:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</guid>
      <description>问题描述 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总</description>
    </item>
    
    <item>
      <title>Javas细节</title>
      <link>http://localhost:1313/post/java%E7%BB%86%E8%8A%82/</link>
      <pubDate>Mon, 20 Jul 2020 10:22:53 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E7%BB%86%E8%8A%82/</guid>
      <description>java Queue add/offer add：向队列末尾添加一个元素，若队列已满，则抛出异常 offer：不会抛异常，返回false。 remove/poll remove：移除队列队头元素，若队列</description>
    </item>
    
    <item>
      <title>买卖股票的最佳时机</title>
      <link>http://localhost:1313/post/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 19 Jul 2020 09:01:05 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>动态规划框架 状态转移方程 dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]) dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]) base case i=-1 and k = 0 dp[-1][k][0] = 0 : i = -1 表示第-1天，意味着还没开始 dp[-1][k][1] = -infinity ： 表示还没开始就已经持有股票，</description>
    </item>
    
    <item>
      <title>Java对象模型</title>
      <link>http://localhost:1313/post/java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 18 Jul 2020 22:41:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</guid>
      <description>对象在内存中的存储布局 对象存储在堆中，对象的引用在栈中，对象在内存中的存储布局如下： 对象头 mark word GC分代年龄 锁状态标记 哈希码 类型指针 lengt</description>
    </item>
    
    <item>
      <title>背包九讲</title>
      <link>http://localhost:1313/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</link>
      <pubDate>Sat, 18 Jul 2020 08:01:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</guid>
      <description>0/1背包 有 N 件物品和一个容量为 V 的背包。每一件物品 i 的体积和价值分别是 $C_i$ 和 $W_i$, 请问将哪些物品装入背包可使价值总和最大？ 状态转移方程：$dp[</description>
    </item>
    
    <item>
      <title>完全平方数</title>
      <link>http://localhost:1313/post/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</link>
      <pubDate>Fri, 17 Jul 2020 19:27:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</guid>
      <description>有效的完全平方数 https://leetcode-cn.com/problems/valid-perfect-square/ 二分查找 注意发生越界的情况，所以用 long 代替 int。 完全平方数 返回一个正整数最少可以由几个完全平方数构成 https://leetcode-cn.com/problems/perfect-squares/ 数学解法 如果满足$4</description>
    </item>
    
    <item>
      <title>最长上升子序列</title>
      <link>http://localhost:1313/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</link>
      <pubDate>Fri, 17 Jul 2020 11:00:05 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</guid>
      <description>问题描述 给定一个无序的整数数组，找到其中最长上升子序列的长度 https://leetcode-cn.com/problems/longest-increasing-subsequence/ 动态规划 dp[i]代表以nums[i]结尾的最长上升子序列的长度，dp[i]=</description>
    </item>
    
    <item>
      <title>寻找重复数</title>
      <link>http://localhost:1313/post/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</link>
      <pubDate>Fri, 17 Jul 2020 10:17:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</guid>
      <description>问题描述 包含n+1个整数的数组nums，其数字都在1到n之间，若只存在一个重复的整数，找出这个重复的整数。 https://leetcode-cn.com/problems/find-the-duplicate-number/ 解题 排序，然后遍历数组即可O(n</description>
    </item>
    
    <item>
      <title>前K个高频元素</title>
      <link>http://localhost:1313/post/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 17 Jul 2020 09:52:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</guid>
      <description>问题描述 找出数组中出现频率最高的k个元素 https://leetcode-cn.com/problems/top-k-frequent-elements/ 思路 用HashMap统计频率 用小根堆求出前K大的数 java实现 在实现最小堆时，可以对元素建堆，并通</description>
    </item>
    
    <item>
      <title>根据身高重建队列</title>
      <link>http://localhost:1313/post/%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 17 Jul 2020 09:11:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</guid>
      <description>问题描述 根据数据大小以及数据位置（前面有几个比他大的元素）来重排这些元素 https://leetcode-cn.com/problems/queue-reconstruction-by-height/ 思路 相同身高的人，按照其所处位置排序 不同身高的人，应该先排身高高的</description>
    </item>
    
    <item>
      <title>移动零</title>
      <link>http://localhost:1313/post/%E7%A7%BB%E5%8A%A8%E9%9B%B6/</link>
      <pubDate>Fri, 17 Jul 2020 08:42:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%A7%BB%E5%8A%A8%E9%9B%B6/</guid>
      <description>问题描述 给定一个数组，将其中的0移动到数组末尾，同时保持非零元素的相对顺序。 https://leetcode-cn.com/problems/move-zeroes/ 解法 双指针</description>
    </item>
    
    <item>
      <title>SSM秒杀</title>
      <link>http://localhost:1313/post/ssm%E7%A7%92%E6%9D%80/</link>
      <pubDate>Thu, 16 Jul 2020 06:16:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ssm%E7%A7%92%E6%9D%80/</guid>
      <description>设计到的技术 mysql 表设计 sql技巧 事务和行级锁 mybatis dao层的设计与开发 mybatis开发 mybatis和spring整合 spring mvc resful接口设计和</description>
    </item>
    
    <item>
      <title>路径和3</title>
      <link>http://localhost:1313/post/%E8%B7%AF%E5%BE%84%E5%92%8C3/</link>
      <pubDate>Wed, 15 Jul 2020 20:45:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%B7%AF%E5%BE%84%E5%92%8C3/</guid>
      <description>问题描述 给定一棵在每个节点都存放着一个整数值的二叉树，找出路径和等于给定数值的路径总数。路径不需要从根节点开始，也不需要在叶子节点结束，但是</description>
    </item>
    
    <item>
      <title>Java虚拟机</title>
      <link>http://localhost:1313/post/java%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Mon, 13 Jul 2020 15:38:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>JVM组成 类加载器 运行时数据区 执行引擎 本地接口库 类加载器 JVM把描述类的数据从二进制字节码文件加载到内存，并对数据进行校验、转换解析和初始化</description>
    </item>
    
    <item>
      <title>Java内存模型</title>
      <link>http://localhost:1313/post/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 13 Jul 2020 15:37:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java线程</title>
      <link>http://localhost:1313/post/java%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 13 Jul 2020 15:12:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E7%BA%BF%E7%A8%8B/</guid>
      <description>java线程状态 我们都知道进程的状态有五种：创建、就绪、运行、阻塞、终止。但java线程状态不同于进程状态，java进程包括一下六种状态： N</description>
    </item>
    
    <item>
      <title>Java8新特性</title>
      <link>http://localhost:1313/post/java8%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 13 Jul 2020 10:49:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java8%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>https://www.runoob.com/java/java8-new-features.html Lambda表达式 允许把函数作为一个参数传进方法中。 作用 主要用来定义行内执行的方法类型接口 简化部分匿名类的写法 方法引用 通过方法的名字来指向</description>
    </item>
    
    <item>
      <title>找到所有数组中消失的数字</title>
      <link>http://localhost:1313/post/%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 13 Jul 2020 09:58:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>问题描述 给定范围内 $[1,n]$ 的整形数组，n同时为数组长度，返回在数组中没有出现的元素。 https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/ 思路 因为数组内的元素都在 $[1,n]$ 之间，全都是正数且都不会大于数组的</description>
    </item>
    
    <item>
      <title>汉明距离</title>
      <link>http://localhost:1313/post/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Mon, 13 Jul 2020 09:42:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</guid>
      <description>问题描述 返回两个整数之间的汉明距离 https://leetcode-cn.com/problems/hamming-distance/</description>
    </item>
    
    <item>
      <title>目标和</title>
      <link>http://localhost:1313/post/%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
      <pubDate>Mon, 13 Jul 2020 08:52:10 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
      <description>问题描述 给定一个非负数数组和一个目标和，对于数组中的任意一个元素，都可以选择在前面添加+或-，返回所有使数组和为目标和的所有符号添加方法数;</description>
    </item>
    
    <item>
      <title>把二叉树转换为累加树</title>
      <link>http://localhost:1313/post/%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91/</link>
      <pubDate>Sun, 12 Jul 2020 17:40:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91/</guid>
      <description>问题描述 https://leetcode-cn.com/problems/convert-bst-to-greater-tree/ 思路 中序遍历而已，只不过要先遍历右子树！</description>
    </item>
    
    <item>
      <title>二叉树的直径</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</link>
      <pubDate>Sun, 12 Jul 2020 17:26:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</guid>
      <description>问题描述 给定一颗二叉树，返回其直径 https://leetcode-cn.com/problems/diameter-of-binary-tree/ 收获 优化该问题的关键在于同时利用dfs的返回值以及在dfs过程中对一个全局变量进行设置这两种dfs的功能</description>
    </item>
    
    <item>
      <title>和为k的子数组</title>
      <link>http://localhost:1313/post/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 12 Jul 2020 17:01:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>问题描述 给定一个整数数组和一个整数K，返回该数组中和为k的连续子数组的个数 https://leetcode-cn.com/problems/subarray-sum-equals-k/ 实现 暴力枚举法,O(n*n) 利用HashMap数据结构进行优化 遍</description>
    </item>
    
    <item>
      <title>任务调度器</title>
      <link>http://localhost:1313/post/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Sun, 12 Jul 2020 15:13:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description>问题描述 给定一个任务队列，每个任务都可以在1个单位时间内完成，但两个相同任务之间必须有长度为n的冷却时间，计算完成所有任务所需最短时间 https://leetcode-cn.com/problems/task-scheduler/ 思路</description>
    </item>
    
    <item>
      <title>每日温度</title>
      <link>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</link>
      <pubDate>Sun, 12 Jul 2020 09:21:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</guid>
      <description>问题描述 根据每日气温列T表重新生成一个列表，对应位置分别为想要观测到更高的气温至少需要等待的天数。气温都是[30,100]内的整数。 https://leetcode-cn.com/problems/daily-temperatures/ 暴力法</description>
    </item>
    
    <item>
      <title>除自身以外数组的乘积</title>
      <link>http://localhost:1313/post/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/</link>
      <pubDate>Sat, 11 Jul 2020 17:48:53 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/</guid>
      <description>问题描述 给定一个数组，输出output，output[i] 等于nums中，出nums[i]之外的所有元素的乘积 https://leetcode-cn.com/problems/product-of-array-except-self/ 思路 两遍循环</description>
    </item>
    
    <item>
      <title>二叉树的最近公共祖先</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Sat, 11 Jul 2020 16:17:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>问题描述 给定一颗二叉树，找到该树种两个指定节点p和q的最近公共祖先 https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/ 我的思路 从root开始，一次判断每个节点是否同时包含节点p，q，重点是同</description>
    </item>
    
    <item>
      <title>回文链表</title>
      <link>http://localhost:1313/post/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 11 Jul 2020 15:28:19 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 判断一个链表是否是回文链表 https://leetcode-cn.com/problems/palindrome-linked-list/ 收获 先将链表转换为数组，再对数组进行判断。 如果用List作为数组的话，需要注意Integer的比较要用e</description>
    </item>
    
    <item>
      <title>最大正方形</title>
      <link>http://localhost:1313/post/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
      <pubDate>Sat, 11 Jul 2020 14:49:58 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
      <description>问题描述 在一个由0，1组成的矩阵中找到只包含1的最大正方形，并返回其面积。 https://leetcode-cn.com/problems/maximal-square/ 收获 首先你得能把暴力法描述出来 首先遍历矩阵找到所有元素等于1的位</description>
    </item>
    
    <item>
      <title>数组中的第K个最大元素</title>
      <link>http://localhost:1313/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sat, 11 Jul 2020 10:50:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</guid>
      <description>问题描述 找出数组中第k大的数 快速选择算法 第K大的元素在nums中的下标是nums.length-k, 把k转换成index之后，就很简单了，i</description>
    </item>
    
    <item>
      <title>Trie（前缀树）</title>
      <link>http://localhost:1313/post/trie%E5%89%8D%E7%BC%80%E6%A0%91/</link>
      <pubDate>Sat, 11 Jul 2020 09:47:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/trie%E5%89%8D%E7%BC%80%E6%A0%91/</guid>
      <description>问题描述 实现前缀树的插入、查找和前缀查找（查找是否存在以传入参数为前缀的字符串） https://leetcode-cn.com/problems/implement-trie-prefix-tree/ 实现 插入：按照字符串的每一个字符遍历前缀树，在最后一个字符</description>
    </item>
    
    <item>
      <title>课程表</title>
      <link>http://localhost:1313/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8/</link>
      <pubDate>Fri, 10 Jul 2020 20:10:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%AF%BE%E7%A8%8B%E8%A1%A8/</guid>
      <description>问题描述 给定课程总量以及他们的先决条件，请判断是否可能完成所有课程的学习。 https://leetcode-cn.com/problems/course-schedule/ 思路 死脑筋啊，题目说先决条件是边缘列表而不是邻接矩阵，我就觉得没</description>
    </item>
    
    <item>
      <title>反转链表</title>
      <link>http://localhost:1313/post/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 10 Jul 2020 18:48:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 反转链表 https://leetcode-cn.com/problems/reverse-linked-list/ sil 头插法</description>
    </item>
    
    <item>
      <title>岛屿数量</title>
      <link>http://localhost:1313/post/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</link>
      <pubDate>Fri, 10 Jul 2020 18:40:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</guid>
      <description>问题描述 给定一个由0,1组成的二维表格，计算其中岛屿的数量 https://leetcode-cn.com/problems/number-of-islands/ 思路 深度优先搜索：用递归实现。 广度优先搜索：用队列实现。 并查集。 每做一次dfs，</description>
    </item>
    
    <item>
      <title>多数元素</title>
      <link>http://localhost:1313/post/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</link>
      <pubDate>Fri, 10 Jul 2020 17:35:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</guid>
      <description>问题描述 找出数组中数量大于n/2的数字 https://leetcode-cn.com/problems/majority-element/ 思路 HashMap：先用HashMap统计每个数字出现的次数，然后再返回次数大于n/2的数字； 随机法</description>
    </item>
    
    <item>
      <title>相交链表</title>
      <link>http://localhost:1313/post/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 10 Jul 2020 16:32:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 返回两个链表相交的起始节点。 https://leetcode-cn.com/problems/intersection-of-two-linked-lists/ 思路 先同时遍历，找到两个链表相差的节点数。 此时就可以让两个链表从长度相等的地方同时开始向后遍历，此时一</description>
    </item>
    
    <item>
      <title>最小栈</title>
      <link>http://localhost:1313/post/%E6%9C%80%E5%B0%8F%E6%A0%88/</link>
      <pubDate>Fri, 10 Jul 2020 15:48:46 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E5%B0%8F%E6%A0%88/</guid>
      <description>问题描述 实现一个最小栈，push,pop,getMin操作时间复杂度都是O(1) https://leetcode-cn.com/problems/min-stack/ 思路 两个栈，一个queue保存所有数据，一个minQueu</description>
    </item>
    
    <item>
      <title>环形链表2</title>
      <link>http://localhost:1313/post/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/</link>
      <pubDate>Fri, 10 Jul 2020 15:26:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/</guid>
      <description>问题描述 判断一个链表是否有环，并返回环的入口节点。 https://leetcode-cn.com/problems/linked-list-cycle-ii/ 思路 首先用快慢指针判断是否有环，如果有环，返回快慢指针相遇的节点。 初始化一个指针p1指向</description>
    </item>
    
    <item>
      <title>单词拆分</title>
      <link>http://localhost:1313/post/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</link>
      <pubDate>Fri, 10 Jul 2020 11:06:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</guid>
      <description>问题描述 给定一个非空字符串s，以及一个包含非空单词列表的字典，判断s是否可以被空格拆分为一个或多个在字典中出现的单词。 https://leetcode-cn.com/problems/word-break/ 思路描述 本质就是单词</description>
    </item>
    
    <item>
      <title>只出现一次的数字</title>
      <link>http://localhost:1313/post/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 10 Jul 2020 09:53:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>问题描述 给定一个飞空数组，除了某个元素只出现一次之外，其他元素均出现两次，找出那个只出现一次的元素。 https://leetcode-cn.com/problems/single-number/ 思路 HashMap 位运算：对所有元素做一次异或运算</description>
    </item>
    
    <item>
      <title>单词搜索</title>
      <link>http://localhost:1313/post/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Fri, 10 Jul 2020 09:44:18 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</guid>
      <description>问题描述 给定一个二维网格和一个单词，判断该单词是否出现在网格中 https://leetcode-cn.com/problems/word-search/ 思路 回溯 首先暴力找出所有和单词第一个字母相同的位置，然后利用回溯（DFS）寻</description>
    </item>
    
    <item>
      <title>子集</title>
      <link>http://localhost:1313/post/%E5%AD%90%E9%9B%86/</link>
      <pubDate>Fri, 10 Jul 2020 09:11:18 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%90%E9%9B%86/</guid>
      <description>问题描述 给定一个不含重复元素的整数数组nums，返回该数组所有可能的子集 https://leetcode-cn.com/problems/subsets/ 思路 递归：具体的实现其实是用迭代实现的，而并非递归，但思路是递归的</description>
    </item>
    
    <item>
      <title>颜色分类</title>
      <link>http://localhost:1313/post/%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</link>
      <pubDate>Thu, 09 Jul 2020 16:40:05 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</guid>
      <description>问题描述 一个数组中只包含0，1，2三个数，将0放到数组最左边，2放到数组最右边，1在数组中间 https://leetcode-cn.com/problems/sort-colors/ 思路 三个指针，p0,p,p2 循环条件(p &amp;lt;= p2) =</description>
    </item>
    
    <item>
      <title>合并区间</title>
      <link>http://localhost:1313/post/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</link>
      <pubDate>Thu, 09 Jul 2020 16:05:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</guid>
      <description>问题描述 给出一个区间的集合，请合并所有重叠的区间 https://leetcode-cn.com/problems/merge-intervals/ 思路 如果我们按照区间的左端点排序，那么在排完序的列表中，可以合并的区间一定是连续的。这是本</description>
    </item>
    
    <item>
      <title>跳跃游戏</title>
      <link>http://localhost:1313/post/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Thu, 09 Jul 2020 15:28:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
      <description>问题描述 给定一个数组，数组中的每个元素代表你能向前走的最大步数，如果你当前在数组的第一个位置，判断你能否达到数组的最后一个位置。 https://leetcode-cn.com/problems/jump-game/ 解题思路 我</description>
    </item>
    
    <item>
      <title>字母异位词分组</title>
      <link>http://localhost:1313/post/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</link>
      <pubDate>Thu, 09 Jul 2020 14:49:53 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</guid>
      <description>问题描述 将一个字符串数组中的字母异位词分组，字母异位词指的是含有字母相同，但排列不同的单词。 https://leetcode-cn.com/problems/group-anagrams/ 解题思路 用到了HashMap&amp;lt;Strin</description>
    </item>
    
    <item>
      <title>旋转图像</title>
      <link>http://localhost:1313/post/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Thu, 09 Jul 2020 11:51:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid>
      <description>问题描述 将一个NxN的二维矩阵顺时针反转90度。 https://leetcode-cn.com/problems/rotate-image/ 思路 先转置，再逐行反转。 以空间复杂度O(1)反转数组的方法；</description>
    </item>
    
    <item>
      <title>在排序数组中查找元素的第一个位置和最后一个位置</title>
      <link>http://localhost:1313/post/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Thu, 09 Jul 2020 11:32:37 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</guid>
      <description>问题描述 本质是范围查找，可以用二分查找来解决 https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/ 代码实现细节 寻找左边界和有边界可以用一个函数来完成，但是需要传入一个参数来表示究竟寻找的是左边</description>
    </item>
    
    <item>
      <title>搜索旋转排序数组</title>
      <link>http://localhost:1313/post/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 09 Jul 2020 10:50:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>问题描述 在一个有序旋转数组中查找一个数。 有序旋转数组指的是从有序数组中选择一个位置，颠倒前后两部分形成的数组。 时间复杂度为O(logn) https://leetcode-cn.com/problems/search-in-rotated-sorted-array/ #</description>
    </item>
    
    <item>
      <title>合并k个排序链表</title>
      <link>http://localhost:1313/post/%E5%90%88%E5%B9%B6k%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 09 Jul 2020 08:58:29 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%90%88%E5%B9%B6k%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 合并k个排序链表 https://leetcode-cn.com/problems/merge-k-sorted-lists/ 复杂度分析 顺序合并：时间复杂度：O(kkn)； 空间复杂度：O(1);其中k是链表个数，n是链表长度； 分治合并：时间</description>
    </item>
    
    <item>
      <title>括号生成</title>
      <link>http://localhost:1313/post/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Thu, 09 Jul 2020 08:24:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>问题描述 生成所有的有效的n对括号的组合 https://leetcode-cn.com/problems/generate-parentheses/ 思路 抓住“回溯” 的思想就可以很简单地利用递归实现； 和“组合总和”的实现有点类似。</description>
    </item>
    
    <item>
      <title>String，StringBuilder和StringBuffer之间的区别</title>
      <link>http://localhost:1313/post/stringstringbuilder%E5%92%8Cstringbuffer%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 09 Jul 2020 08:04:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/stringstringbuilder%E5%92%8Cstringbuffer%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>String String属于对象（引用在栈中，对象在堆中），但String是不可变的，每次操作都会生成新的对象，如下图所示 StringBuilder,StringBuffer StringBuilder</description>
    </item>
    
    <item>
      <title>三数之和</title>
      <link>http://localhost:1313/post/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Thu, 09 Jul 2020 07:45:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>问题描述 从一个整数数组中找出所有的和为0的不重复的三元组。 https://leetcode-cn.com/problems/3sum/ 解题思路 首先想到的是“组合之和”这种解题思路，但是这种解题思路的复杂度太高了。 其</description>
    </item>
    
    <item>
      <title>二叉树中的最大路径和</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</link>
      <pubDate>Thu, 09 Jul 2020 06:41:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</guid>
      <description>题目描述 类似于从数组中找到最大子数组。 不同于寻找二叉树的最大直径。 https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/ 思路 首先转换为寻找每个节点的最大贡献值：即以该节点为起点的最大路径和，这</description>
    </item>
    
    <item>
      <title>二叉树展开为链表</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 08 Jul 2020 17:16:28 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 将一颗二叉树以先序遍历的顺序展开为一个单链表。 其本质上是将二叉树扁平化，变为一颗只有右子树的二叉树。 https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/ 实现 如果左子树为空则不需要修改</description>
    </item>
    
    <item>
      <title>二叉树最大深度</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link>
      <pubDate>Wed, 08 Jul 2020 15:37:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid>
      <description>问题描述 求出二叉搜索树的最大深度，其实可以转换为求最大高度！ https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/ 递归实现 很简单 时间复杂度O(n)， 因为每个节点只遍历一次！ 循环实现 官方答案没看</description>
    </item>
    
    <item>
      <title>二叉树的层次遍历</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</link>
      <pubDate>Wed, 08 Jul 2020 15:18:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</guid>
      <description>问题描述 层次遍历 层与层之间分开 https://leetcode-cn.com/problems/binary-tree-level-order-traversal/ 分析 层次遍历很简单，只需要一个队列就可以完成。 层与层之间分开是参考的官方解法：每次循环之前都求一下queue</description>
    </item>
    
    <item>
      <title>验证二叉搜索树</title>
      <link>http://localhost:1313/post/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Wed, 08 Jul 2020 08:51:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>题目描述 https://leetcode-cn.com/problems/validate-binary-search-tree/ 递归实现 我的想法是先判断左右子树是不是，在判断左孩子的最大元素是否小于根元素，最后判断有孩子的最小元素是否大于根元素，实现起来比较</description>
    </item>
    
    <item>
      <title>不同的二叉搜索树</title>
      <link>http://localhost:1313/post/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Wed, 08 Jul 2020 08:25:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>题目描述 https://leetcode-cn.com/problems/unique-binary-search-trees/ 解题时间 38 min 解题思路 中序遍历 递归 左右子树 官方解题 动态规划：动态规划思路是比较明确的，毕竟递归过程中做了太多重复性工作 卡特兰数：$C</description>
    </item>
    
    <item>
      <title>链表中是否有环</title>
      <link>http://localhost:1313/post/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</link>
      <pubDate>Wed, 08 Jul 2020 00:16:01 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</guid>
      <description>哈希表 时间复杂度O(n) 空间复杂度O(n) 快慢指针 时间复杂度分析 如果不存在环 O(n) 非环部分长N，环部分长K，最差情况也就O(N+K),O(n) 空</description>
    </item>
    
    <item>
      <title>MIT6824项目</title>
      <link>http://localhost:1313/post/mit6824%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 07 Jul 2020 23:32:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mit6824%E9%A1%B9%E7%9B%AE/</guid>
      <description>##MapReduce Map/Reduce input and output 主要是关于怎么做Map，怎么做Reduce； Map过程主要的思想就是利用一个哈希函数将任务分类，以分别分配给不同的机器，并且保证任</description>
    </item>
    
    <item>
      <title>链表排序</title>
      <link>http://localhost:1313/post/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 07 Jul 2020 15:26:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F/</guid>
      <description>链表排序 https://leetcode-cn.com/problems/insertion-sort-list/submissions/ https://leetcode-cn.com/problems/sort-list/ 插入排序 哑节点的合理运用 链表遍历需要两个指针 插入排序的细节：寻找插入位置有两种情况，一种是在原位置，一种需要位置变动 快速排序 前闭</description>
    </item>
    
    <item>
      <title>组合</title>
      <link>http://localhost:1313/post/%E7%BB%84%E5%90%88/</link>
      <pubDate>Tue, 07 Jul 2020 00:11:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%BB%84%E5%90%88/</guid>
      <description>组合 问题描述 https://leetcode-cn.com/problems/combinations/submissions/ 收获 组合与排列的不同之处在于，组合只能向后看，排列是删除一个元素，组合是删除该元素以及该元素之前的所有元素！ 组合的另外一个不同</description>
    </item>
    
    <item>
      <title>全排列</title>
      <link>http://localhost:1313/post/%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <pubDate>Mon, 06 Jul 2020 20:57:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <description>字母大小全排列 题目描述 https://leetcode-cn.com/problems/letter-case-permutation/ 收获 StringBuilder的用法（append） foreach的用法 ArrayList是有序的而且可以用过下标i</description>
    </item>
    
    <item>
      <title>快速排序的递归及迭代实现</title>
      <link>http://localhost:1313/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E9%80%92%E5%BD%92%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 06 Jul 2020 17:08:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E9%80%92%E5%BD%92%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%AE%9E%E7%8E%B0/</guid>
      <description>递归实现 https://github.com/duanxinpeng/SortAlgorithms/blob/master/src/QuickSort.java</description>
    </item>
    
    <item>
      <title>二叉树的中序遍历</title>
      <link>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 06 Jul 2020 16:01:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>递归实现 https://leetcode-cn.com/problems/binary-tree-inorder-traversal/submissions/ 非递归实现 https://leetcode-cn.com/problems/binary-tree-inorder-traversal/submissions/ 非递归实现的关键在于理清楚在递归实现过程中的入栈、出栈情况；</description>
    </item>
    
    <item>
      <title>海量数据问题</title>
      <link>http://localhost:1313/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 05 Jul 2020 17:11:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</guid>
      <description>海量数据中找出不重复的元素 BitMap 如果是纯数字就可以用BitMap用两位表示一个数字的状态，00代表没有出现过，01代表出现一次，11 代表出现过多</description>
    </item>
    
    <item>
      <title>TopK问题</title>
      <link>http://localhost:1313/post/topk%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 05 Jul 2020 16:42:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/topk%E9%97%AE%E9%A2%98/</guid>
      <description>从N个数中找出最大的K个数 排序 O(NlogN) 冒泡排序 O(N*K) 小根堆 O(NlogK) 如果求最大k个数就用小根堆，如果求最小k个数就用大根堆 虽然不是最快的，但是却是最好的方式，</description>
    </item>
    
    <item>
      <title>LFU的原理和实现</title>
      <link>http://localhost:1313/post/lfu%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Jul 2020 14:45:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/lfu%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</guid>
      <description>LFU https://leetcode-cn.com/problems/lfu-cache/ HashMap+TreeSet实现 在HashMap中存放键值对，在TreeSet中存放节点的使用频率、更新时间的先后关系； get O(logN) 判断Has</description>
    </item>
    
    <item>
      <title>LRU原理和Redis实现</title>
      <link>http://localhost:1313/post/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 05 Jul 2020 09:57:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/lru%E5%8E%9F%E7%90%86%E5%92%8Credis%E5%AE%9E%E7%8E%B0/</guid>
      <description>LRU原理 HashMap+双向链表实现（hashmap用于查询，双向链表主要用于保证新旧顺序） put O(1) 判断是否存在，如果存在，替换（这里存在替换</description>
    </item>
    
    <item>
      <title>树结构总结</title>
      <link>http://localhost:1313/post/%E6%A0%91%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 02 Jul 2020 06:36:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%A0%91%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/</guid>
      <description>堆 性质 左右孩子节点的值都小于根节点，且左右孩子都是堆的完全二叉树 最小堆构建 一个数组，从数组的最后一个元素的父亲节点（n/2）开始进行调整，以</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://localhost:1313/post/redis/</link>
      <pubDate>Wed, 01 Jul 2020 01:13:27 +0800</pubDate>
      
      <guid>http://localhost:1313/post/redis/</guid>
      <description>常规数据类型 string SDS 简单动态字符串 二进制安全（意思是输入任何字节都能正确处理，不会依赖于\0来判断字符是否结束），所以可以存储任何数据 最大能存储</description>
    </item>
    
    <item>
      <title>Cnn</title>
      <link>http://localhost:1313/post/cnn/</link>
      <pubDate>Thu, 18 Jun 2020 15:07:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/cnn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>最长连续序列</title>
      <link>http://localhost:1313/post/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</link>
      <pubDate>Sat, 06 Jun 2020 10:53:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</guid>
      <description>Leecode-128 https://leetcode-cn.com/problems/longest-consecutive-sequence/ 问题描述 给定一个未排序的整数数组，找出最长连续序列的长度。 要求时间复杂度为 O(n). 示例: 输入：[100,4,200,1,3,2] 输出：4 解释：</description>
    </item>
    
    <item>
      <title>Linux命令</title>
      <link>http://localhost:1313/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 06 Jun 2020 08:37:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>常用命令及其参数 find 用于在指定目录查找文件 kill 用于删除执行中的任务 export [-fnp][变量名称]=[变量设置值] 用于设置或显示环境变量 top 用于实时显示</description>
    </item>
    
    <item>
      <title>Enigma密码机</title>
      <link>http://localhost:1313/post/enigma%E5%AF%86%E7%A0%81%E6%9C%BA/</link>
      <pubDate>Sat, 06 Jun 2020 07:47:41 +0800</pubDate>
      
      <guid>http://localhost:1313/post/enigma%E5%AF%86%E7%A0%81%E6%9C%BA/</guid>
      <description>Enigma密码机简介 Enigma密码机属于对称秘钥加密算法的轮转密码的实现。在第二次世界大战中广泛应用。 构造 主要有4个部件：键盘、转子、反</description>
    </item>
    
    <item>
      <title>字符编码</title>
      <link>http://localhost:1313/post/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 05 Jun 2020 20:24:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid>
      <description>ASCII码：最简单的一种编码方式，一共规定了128个字符的编码。 ANSI码：是对ASCII编码的扩展，其前128个字符与ASCII相同；在</description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客</title>
      <link>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 05 Jun 2020 19:58:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>在win10上利用Hugo+github搭建个人博客包括以下步骤： 安装Hugo(https://gohugo.io/getting-star</description>
    </item>
    
    <item>
      <title>Tips</title>
      <link>http://localhost:1313/post/tips/</link>
      <pubDate>Fri, 05 Jun 2020 14:54:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tips/</guid>
      <description>显卡 集成显卡：集成显卡占用CPU，需要一部分内存作为显存，计算能力弱（例如玩3D游戏时，就会力不从心），速度慢，功耗低； 独立显卡：自带GPU</description>
    </item>
    
  </channel>
</rss>